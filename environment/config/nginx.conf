events { worker_connections 512; }
daemon off;
http {

    gzip on;
    gzip_min_length  500;
    gzip_proxied     any;
    gzip_comp_level 4;
    gzip_types  text/css text/javascript text/xml text/plain text/x-component application/javascript application/json application/xml application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
    gzip_vary on;
    gzip_disable     "msie6";

    include /etc/nginx/mime.types;

    proxy_cache_path /tmp/nginx/cache levels=1:2 keys_zone=project_cache:10m max_size=10g inactive=60m; 
    #use_temp_path=off;
    fastcgi_cache_path /tmp/nginx/fcgicache levels=1:2 keys_zone=project_fcgicache:100m inactive=60m;

    log_format compression '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status ';

    server {
        listen 80 default_server;
        
        access_log /dev/stderr compression;
        error_log /dev/stderr;

        root /var/www/html/web/;
        
        client_max_body_size 50M;

        # strip app.php/ prefix if it is present
        rewrite ^/app\.php/?(.*)$ /$1 permanent;

        location / {
            # Turn on maintenance if maintenance.html exists
            if (-f $document_root/maintenance.html) {
                return 503;
            }

            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            expires -1;
            etag off;

            index app.php;
            try_files $uri @rewriteapp;
        }

        location @rewriteapp {
            rewrite ^(.*)$ /app.php/$1 last;
        }

        # Set to 0 when in production!!!!!!
        set $skip_cache 1;

        # POST requests should always go to PHP
        if ($request_method = POST) {
            set $skip_cache 1;
        }

        # pass the PHP scripts to FastCGI server from upstream phpfcgi
        location ~ ^/(index|app|app_dev|info)\.php(/|$)|/status|index/.*\.php$ {

            fastcgi_cache project_fcgicache;
            fastcgi_cache_bypass $skip_cache;
            fastcgi_no_cache $skip_cache;
            fastcgi_cache_key "$scheme$request_method$host$request_uri$args";
            fastcgi_cache_valid 200 60m;
            fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
            fastcgi_read_timeout 150;
            send_timeout 1800;

            #proxy_read_timeout 150;
            #proxy_set_header   X-Real-IP $remote_addr;
            #proxy_set_header   Host      $http_host;
            #proxy_http_version 1.1;
            #proxy_set_header Connection "";

            # Pass request to php-fpm pools
            fastcgi_pass localhost:9000;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            fastcgi_buffers 16 16k;
            fastcgi_buffer_size 32k;

            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            fastcgi_param DOCUMENT_ROOT $realpath_root;
            fastcgi_param HTTPS off;
        }

        # Static files rule-set
        location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf|css|js|html)$ {
            # Set rules only if the file actually exists.
            if (-f $request_filename) {
                expires 15d;
            }

            access_log off;

            proxy_cache project_cache;
            proxy_cache_key $host$uri#is_args$args;
            proxy_cache_valid 200 304 12h;
            proxy_cache_valid 302 301 12h;
            proxy_cache_valid any 1m;

            # Rewrite to app.php if the requested file does not exist.
            try_files $uri @rewriteapp;
        }

        # Maintenance mode error settings
        error_page 503 @maintenance;
        location @maintenance {
            open_file_cache_valid 0s;
            rewrite ^(/maintenance\.png)$ /$1 break;
            rewrite ^(.*)$ /maintenance.html break;
        }

        # Return 404 for any other php file
        location ~ \.php(/|$) {
            # Keep log in access.log too
            access_log /dev/stderr;

            return 404;
        }

        # Deny all .ht* files with 404 response
        location ~ /\.ht {
            return 404;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }
        
    }
}